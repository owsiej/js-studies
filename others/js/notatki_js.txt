Wartości Falsy:
 - false
 - undefined
 - null
 - NaN
 - 0
 - "" - pusty string

 Wartości Truthy:
 - {}
 - []
 - wszystko pozostałe co nie jest Falsy

zmienne:
    - const - działa tak jak let, jednak nie możemy jej nadpisać
    - var - definiowana w scope blokowym ma zasięg globalny, natomiast w nie wychodzi poza scope funkcyjny

Operator precedence - mówi o tym, jak wyrażenia z operatorami są łączone
                     * o kolejności działań decyduje pierwszeństwo operatorów
                     * tabela pierszeństwa: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_precedence

Tworzenie gotowych tablic:
    - Array(len).fill(value);
    - [...Array(len)]
    - Array.from({length:len})

Tablice są referencjami do wartości, czyli w przykładzie:
    let a=[1];
    let b=a;
    - mamy dwie zmienne, które posiadają wartości wskazujące na ten sam adres w pamięci;

unshift, shift - dodawanie/usuwanie el na początku tablicy;
push, pop - dodawanie/usuwanie el na końcu tablicy;

Funkcje - można wywoływać funkcję przed jej deklaracją ale nie wtedy, gdy
          funkcja była zadeklarowana w wyrażeniu i np przypisana do zmiennej -> hoisting

Closures (domknięcia) - występują kiedy z jednej funkcji zwracamy drugą funkcję
                      - dana funcja musi być przypisana do zmiennej aby móc wywoływać kolejną funkcję
                      - wartości poszczególnych wywołań funkcji są zapisywane w tzn. plecaku

Scope - dzielenie kodu; wyróżniamy scopy globalne, funkcyjne oraz blokowe;
        - scope dziecko(znajdujący się wewnątrz) ma dostęp do scopa rodzica(zewnętrzego)

Hoisting - zachowania powodujące przesuwanie wywowań funkcji i zmiennych na górze scopa
         - pojawia się przy definiowaniu zmiennych typu var
         - w fazie kreacji, jeżeli mamy zainicjalizowaną zmienną var, program wie, że taka zmienna istnieje 
           ale nie wie czym ona jest, ponieważ przypisanie do niej następuje w fazie egzekucji
         - funkcje zawsze hoistowane są wyżej jak zmienne

operator porównania == - jeżeli porównywane wartości są różnych typów to najpierw przeprowadzane jest rzutowanie na dany typ a
                         później następuje porównanie wartości;

różnica pomiędzy null a undefined:
        - null oznacza, że dana wartość nie istnieje
        - undefined oznacza, że dana wartość nie została jeszcze przypisana, czyli:
                    * zmienna nie została zainicjalizowana
                    * do zmiennej przypisano wartość, która nie jest liczbą, stringiem, obiektem albo funkcją
                    * do zmiennej przypisano wartość, która nie istnieje w tablicy lub obiekcie

empty vs blank:
      - empty - może reprezentować zainicjalizowaną zmienną, lecz nie przedstawiającej żadnej wartości, np: null,undefined,"",[]
      - blank - przedstawia dosłownie puste miejsce, np. console.log("")

Obiekt - zawiera się pomiędzy nawiasami klamrowymi;
       - wywołując paramentry obietku, za jego nazwą możemy dodać "?", np. Character?.name?, 
         spowoduje to, że program najpierw sprawdzi czy dany obiekt/atrybut istnieje, jeżeli to nic się nie wydarzy
         -> nie wyrzuci błędu
       - dynamiczne klucze, czyli definiowanie parametru obiektu w [key]:value, zastosowanie [] pozwala na odniesienie się do
         klucza który może być zmienną, dynamicznie się generować

call, apply, bind - metody klasy Function:
      - call - przyjmuje parametr this, czyli obiekt, w zakresie którego ma się wywołać(null,undefined = obiekt globalny) oraz parametry dla funkcji(...args)
      - apply - to samo co call lecz przyjmuje liste argumentów [...args]
      - bind - przyjmuje this oraz ...args użyte do przygotowania nowej funkcji i zwraca nową funkcję na obiekcie this z argumentami ..args

róznica pomiedzy funkcja strzalkowa vs anonimowa vs zwykla deklaracja:
      - zwykłe funkcje są hoistowane do góry a funkcje anonimowe/strzałkowe zwykle przypisane są do zmiennych i w fazie kompilacji są traktowane
        jako zwykłe zmienne, czyli zadeklarowane ale bez ciała,
      - parametr this: 
              - odnosi się do obiektu 
              - w zwykłych funkcjach this odnosi się do obiektu, którym funkcja jest wywoływana
              - w strzałkowych/anonimowych this odnosi się do obiektu nadrzędnego, czyli zmiennej, jeżeli zostałą do niej przypisana albo
                do globala
      - strzałkowa/anonimowa nie posiadają możliwości użycia metod call, apply, bind oraz parametru arguments zawierającego liste wszystkich argumentów przekazanych do funkcji
      - funkcje anonimowe:
          * nie musi mieć podane nazwy podczas deklaracji, czyli function(){} wystarcza
          * używana jako IIFE
      - funkcja strzałkowa:
          * nie może być używana jako metoda, ponieważ nie posiada swojego this

IIFE (Immediately Invoked Function Expression) - funkcja samowywołująca się, (function(){})()

prototype - właściwość w klasach służąca do dziedziczenia właściwości

require vs import - require używamy głównie do bibliotek
                  - syntax, import from ('sciezka'), require('sciezka')
                  - require mozemy odpalic z kazdnego miejsca w kodzie, import natomiast zawsze odpala sie na początku pliku
                  - require jest synchroniczny a import async
                  - import mozna wykorzystac do importu pojedynczych rzeczy a require od razu importuje cale moduly
                  - używająć importu z {} importujemy konretny obiekt z danej ścieżki, który ma dopisane keyword export,
                    raz na plik możemy użyć export default, czyli domyślnego importu, czyli kiedy będziemy importować z danej ścieżki
                    bez powołania na konkretny obiekt za pomocą {}, zimportujemy ten właśnie obiekt,
                    podsumowująć, chcąc użyć import {"name"}, pod dana ścieżką musi znajdować się obiekt o nazwie "name"
                    
kod asynchroniczny:
        - wykona sie po całym kodzie synchronicznym i jak callstack jest pusty
        - setTimeOut() - wykona się dopiero po kodzie sync nawet, jeżeli delay skończył się wcześniej

Facade functions - zachowują się jako przejście do przeglądarki/narzędzi z node

Promise - znajduje się w jednym z 3 stanów:
                          - pending - wyjściowy stan, posiada ukrytą właściwość result: initially undefined
                          - fulfilled - operacja zakończyła się pomyślnie, posiada właściwości {value: "", onFulfilled: []}, result: "done"
                                        za pomocą .then umieszczamy funkcje to wykonania w onFulfilled
                          - rejected - operacja zakończyła się niepomyślnie, posiada właściwości {value: "", onRejected: []}, result: "error"
                                       za pomocą .catch umieszczamy funkcje to wykonania w onRejected
        - jak argument przyjmuje executor posiadający dwie funkcje: resolve i reject
        - Promise można uznac jako rozwiązany(resolved) kiedy jedna z funkcji resolve/rejected zostanie odpalona
        
fetch() - facade function, która:
                          - w przeglądarce odpala request
                          - w js tworzy nowy obiekt Promise

new - tworzy pusty obiekt, przypisuje go do this, odnoszące się do tego obiektu
    - każdy obiekt posiada ukrytą zmienną __proto__, gdzie przechowują się dziedziczone właściwości
    - przypisuje do tego obiektu podane właściwości i zwraca go

class - zbitek funkcji i obiektu
          * funkcja to kontruktor
          * obiekt to pole prototype, gdzie przechowywane są wszystkie metody danej klasy

extends - łaczny prototypy danych klas

static - dostępne tylko klas samych w sobie, nie dla instacji tych klas

JS LIFECYCLE - 1. thread of execution (wątek egzekucji) - idzie po kodzie od góry do dołu po linijce, odpalając każdą kolejną linijkę
               1a. event loop - model tworzyny przy starcie node, odpowiedzialny za wykonanie kodu, zbieranie i przetwarzanie eventów i egzekucje kolejek, mechanizm sprwadzający czy callstack jest pusty
                              - zajmuje sie kolejkami - FIFO(first-in-first-out), posiada kolejki timers, poll and check
                                  * timers - wykonuje callbacki ustawione przez setTimeOut and setInterval - wykonywane jako pierwsze
                                  * poll - zajmuje się I/O eventami, wykonuje ich callbacki oprócz callbacków z timeoutami - wykonywane jako drugie
                                  * check wykonuje callbacki setImmediate() - wykonywane jako trzecie
                              - w node pozwala na przerzucenie operacji do jadra systemu
                              - daje priorytet dla call stacku (czyli wykonanie kody synchronicznego)
               1b. przed odpaleniem modułu, node wrapuje go funkcją przez co:
                    * zamyka wszystkie zmienne w tymm module zamiast trzymać je globalnie (zmienne w funkcji są widoczne tylko w jej bloku)
                    * tworzy globalne zmienne spefyciczne dla danego modulu, np. module/exports używane później do eksportu kodu z modułu czy filename/dirname zawierające nazwę pliku oraz ściężke do niego
               1c. callback - funkcja podana jako argument w innej funkcji, pozwalają na przetwarzanie innego kodu w międzyczasie
                    * kiedy async func zrobi jakieś zapytanie do node api, w momencie kiedy przyjdzie return z api, callback do kolejki obsługiwanej przez event loop
                    * kiedy call stack będzie pusty to zostanie odpalony callback
               2. memory - miejsce zachowywania wszystkich danych
               3. call stack - mechanizm interpretera pozwalający śledzić aktualnie wywołujące się miejsce w kodzie
                             - LIFO - last in, first out -> kiedy interpreter trafia w kodzie na wywołanie funkcji to dodaje ją do stacka i przetwarza
                                                         -> jeżeli ta funkcja posiada kolejne wywołania funkcji to dodawane są one na góre stacka i przetwarzane
                                                         -> jeżeli dana funkcja zostanie zakończona, zostaje usunięta z stacka i następuje powrót do kodu z miejsca tej funkcji
               3a. asynchroniczne funkcje wrzuce są w kolejki i oczekują aż synchroniczny kod się zakończy(call stack będzie pusty)

callback vs Promise - callback jest funkcja a Promise obiektem
                    - callback przymuje argumenty a Promise zwraca wartości
                    - callback wspiera success/error a Promise nic nie obsługuje ale przekazuje wartości
                    - callback może być wywołany wiele razy a Promise tylko raz

Wzorce projektowe:
DO TWORZENIA NOWYCH OBIEKTÓW (CREATIONAL):
  - Closure - posiada dostęp do zakresu funkcji w momencie jej tworzenia
            - tworzenie funkcji wewnątrz funkcji i zwrócenie jej
            - zwrócona funkcja posiada dostępu do zakresu funkcji, z której została zwrócona, mimo iż konteks tej nadrzędnej funkcji skończył się
  - podejście Modułowe - rozbicie kodu na mniejsze kawałki, podział na pliki i importowanie ich
                       - aktualnie obowiązuje podejście ES6 Modules
  - Singleton - kawałek kodu powinien być odpalony tylko raz albo dana zmienna powinna być tworzona tylko raz i dzielona przez czas działania apki
DO MODYFIKACJI ISTNIEJĄCYCH OBIEKTOW (STRUCTURAL)
  - Wrapper - otoczenie istniejącej funkcji dodatkową funkcją czyli wrapperem
            - dodaje dodatkową funkcjonalność do istniejących funkcji
            - działa na zasadzie callbacków
            - dobrze działa jako cachowanie danych
  - Curry - podstawa programowania funkcyjnego
          - składa się z unary functions (funkcji jednoargumentowych), gdzie jedna taka funkcja zwraca kolejną
          - polega na domknięciach (closures)
  - Composition - komponowanie mniejszych jednostek w większe
                - argumentem wejściowym jednej funkcji są dane zwrócone z poprzedniej funkcji
  - Decorator - używany do zmiany/powiększania istniejących obiektów/klas/metod/parametrów
              - z reguły oznaczony przedrostkiem @
  - Mixin - dodawanie funkcjonalności do obiektu poprzec zmiksowanie go z innym obiektem